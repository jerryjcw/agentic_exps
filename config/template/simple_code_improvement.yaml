template_name: "Code Analysis Query Template (Jinja2)"
template_description: "Jinja2 template for generating code analysis queries with dynamic content"
template_version: "2.0"
template_engine: "jinja2"

template_content: |
  Please analyze the following {{ language }} code for improvements:

  {% if file_name|length == 1 -%}
  File: {{ file_name[0] }}

  Code to analyze:
  ```{{ file_type[0] }}
  {{ file_content[0] }}
  ```
  {% else -%}
  Files to analyze ({{ file_name|length }} files):

  {% for i in range(file_name|length) -%}
  ## File {{ loop.index }}: {{ file_name[i] }}
  
  File Type: {{ file_type[i] }}
  
  Code:
  ```{{ file_type[i] }}
  {{ file_content[i] }}
  ```

  {% endfor -%}
  {% endif -%}

  Please provide a comprehensive analysis focusing on:
  {% for item in analysis_focus -%}
  {{ loop.index }}. {{ item }}
  {% endfor %}
  
  {% if file_name|length > 1 -%}
  When analyzing multiple files, please consider:
  - Relationships and dependencies between the files
  - Cross-file consistency in coding patterns and conventions
  - Potential integration issues or conflicts
  - Overall architecture and design patterns across the codebase
  {% endif -%}
  
  Provide specific recommendations with examples where possible.
  There will be additional code files being introduced in the upcoming steps, you MUST include them into the overall analysis. 

template_variables:
  language:
    description: "Programming language of the code"
    type: "string"
    default: "Python"
  file_name:
    description: "Array of file names being analyzed"
    type: "array"
    default: ["unknown_file"]
  file_type:
    description: "Array of file types corresponding to each file"
    type: "array"
    default: ["text"]
  file_content:
    description: "Array of file contents corresponding to each file"
    type: "array"
    default: [""]
  analysis_focus:
    description: "List of analysis focus areas"
    type: "array"
    default:
      - "Security vulnerabilities and defensive measures"
      - "Performance bottlenecks and optimization opportunities"
      - "Code quality issues and maintainability improvements"
      - "Testing gaps and coverage recommendations"